<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dyna-processings on Dyna FRP</title><link>https://anton-k.github.io/dyna-frp/dyna-processing/</link><description>Recent content in Dyna-processings on Dyna FRP</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://anton-k.github.io/dyna-frp/dyna-processing/index.xml" rel="self" type="application/rss+xml"/><item><title>dyna-gloss tutorial</title><link>https://anton-k.github.io/dyna-frp/dyna-processing/tutorial-toc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anton-k.github.io/dyna-frp/dyna-processing/tutorial-toc/</guid><description>FRP bindings for library processing-for-haskell which is great to create 2D and 3D animation and graphics.
The library implements the Processing language. It&amp;rsquo;s an imperative EDSL for graphics and animation. It&amp;rsquo;s very easy and fun to use. There are many books on processing and community is fairly active. We can find the quick start guide and lots of examples in the project repository on github https://github.com/anton-k/processing-for-haskell (see the directory examples). There is a tutorial at the project homepage at github: https://github.</description></item><item><title>FRP for processing gaming/animation library</title><link>https://anton-k.github.io/dyna-frp/dyna-processing/tutorial/00-intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anton-k.github.io/dyna-frp/dyna-processing/tutorial/00-intro/</guid><description>In this tutorial we will study the FRP binding to the processing-for-haskell library. The processing-for-haskell is suitable to create animations and games. It embeds Processing language into Haskell. The application is run with state-machine like approach. We have a function that renders the state of application on the screen and we have a function that updates the state on events.
With FRP we use the same functions for drawing as they are defined in the gloss (see the module Graphics.</description></item><item><title>FRP processing example</title><link>https://anton-k.github.io/dyna-frp/dyna-processing/tutorial/01-example/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anton-k.github.io/dyna-frp/dyna-processing/tutorial/01-example/</guid><description>Let&amp;rsquo;s study another example. In this application we are going to paint green and red circles on the screen. We paint in the mouse position when we press Right Button and we can change the color when we press the Left Button.
The complete code can be found in the directory: dyna-processing/examples/Ball.hs.
Init application Let&amp;rsquo;s start with an empty screen and setup all the defaults:
module Main where import Dyna.Proc -- | Screen specification spec :: Spec spec = Spec $ size (P2 700 700) -- | Main app main = runApp spec $ pure (initDraw &amp;lt;&amp;gt; pic) where initDraw = background white pic = mempty This should draw an empty screen.</description></item><item><title>Quick Reference of dyna-gloss functions</title><link>https://anton-k.github.io/dyna-frp/dyna-processing/tutorial/101-reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anton-k.github.io/dyna-frp/dyna-processing/tutorial/101-reference/</guid><description>All FRP core functions can be used (see the reference for dyna package). Main types
Evt a - event streams Dyn a - dynamic values Run a - main app/frp monad P2 / P3 - vectors (2D and 3D) Pio a - processing IO-monad Draw - a sequence of drawing instructions (Pio ()) Click - click event Spec - initial config for the application Run the application runApp :: Spec -&amp;gt; Run (Dyn Draw) -&amp;gt; IO () -- init application, setup instructions data Spec = Spec { spec&amp;#39;setup :: Pio () } User interaction -- mouse input mouse :: Dyn P2 mouseRight :: Evt P2 mouseLeft :: Evt P2 mouseMiddle :: Evt P2 mouseWheel :: Evt Float -- mouse pointer velocity mouseV:: Dyn P2 -- mouse pointer acceleration mouseA :: Dyn P2 -- detection of drag action isDrag :: MouseButton -&amp;gt; Dyn Bool drag :: MouseButton -&amp;gt; Dyn P2 dragV :: MouseButton -&amp;gt; Dyn P2 -- generic events data Click = Click (Either Key MouseButton) KeyState Modifiers P2 data KeyState = Up | Down getClicks :: Evt Click -- Time that has passed since previous step of simulation timeInterval :: Dyn Float -- key actions keyUp :: Key -&amp;gt; Evt Modifiers keyDown :: Key -&amp;gt; Evt Modifiers charUp :: Char -&amp;gt; Evt Modifiers charDown :: Char -&amp;gt; Evt Modifiers Drawing pictures and other processing functions See the docs for processing-for-haskell.</description></item></channel></rss>