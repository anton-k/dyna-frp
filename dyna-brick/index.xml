<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dyna-bricks on Dyna FRP</title><link>https://anton-k.github.io/dyna-frp/dyna-brick/</link><description>Recent content in Dyna-bricks on Dyna FRP</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://anton-k.github.io/dyna-frp/dyna-brick/index.xml" rel="self" type="application/rss+xml"/><item><title>dyna-brick tutorial</title><link>https://anton-k.github.io/dyna-frp/dyna-brick/tutorial-toc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anton-k.github.io/dyna-frp/dyna-brick/tutorial-toc/</guid><description>The dyna-brick is a FRP for brick library. The brick is a great library for building terminal user applications (TUIs). With brick we can write terminal user interfaces (TUIs) painlessly! And with FRP approach it becomes even more declarative.
Tutorial Introduction Example: Puzzle 15 Quick reference Resources Official brick tutorial Samuel Tay brick tutorial Hackage docs</description></item><item><title>FRP for building terminal user applications (TUIs)</title><link>https://anton-k.github.io/dyna-frp/dyna-brick/tutorial/00-intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anton-k.github.io/dyna-frp/dyna-brick/tutorial/00-intro/</guid><description>In this tutorial we will study the FRP binding to the brick library. The brick is suitable for creation of TUIs. Interactive command line tools. It features declarative description of the terminal widgets. The application is run with state-machine like approach. We have a function that renders the state of application on the screen and we have a function that updates the state on events.
Brick is a wonderful library! We can make it even better if we use FRP with it.</description></item><item><title>Puzzle 15</title><link>https://anton-k.github.io/dyna-frp/dyna-brick/tutorial/01-puzzle-15/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anton-k.github.io/dyna-frp/dyna-brick/tutorial/01-puzzle-15/</guid><description>In this example we will implement &amp;ldquo;Puzzle 15&amp;rdquo; game in dyna-brick. Here is what end point position look like:
The player tries to arrange numbers on the board. By pressing arrow keys we can substitute some number with an empty box. We win when all numbers are placed in ascending order like it is shown on the picture.
You can find the complete example in the examples of the dyna-brick directory.</description></item><item><title>Quick reference for dyna-brick</title><link>https://anton-k.github.io/dyna-frp/dyna-brick/tutorial/101-reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anton-k.github.io/dyna-frp/dyna-brick/tutorial/101-reference/</guid><description>All FRP core functions can be used (see the reference for dyna package).
Main types:
Evt a - event streams Dyn a - dynamic values Run a - main app/frp monad BoxId - text based id for the widget Box - widget with id parameter set to BoxId Act - brick app actions (for example Quit) Win - pair of dynamic widgets and event stream of quit-actions Run the application runApp :: Spec -&amp;gt; Run Win -&amp;gt; IO () data Spec = Spec { spec&amp;#39;attrMap :: AttrMap , spec&amp;#39;cursor :: [CursorLocation BoxId] -&amp;gt; Maybe (CursorLocation BoxId) } defSpec :: AttrMap -&amp;gt; Spec emptyAttrMap :: AttrMap data Win = Win { win&amp;#39;widgets :: Dyn [Box] -- ^ window view , win&amp;#39;acts :: Evt Act -- ^ brick app actions } type Box = Widget BoxId newtype BoxId = BoxId { getBoxId :: Text } -- | Actions for Brick rendering engine data Act = Quit -- ^ Quit the app User interaction -- generic terminal events vtyEvents :: Evt Event -- mouse input mouseUp :: Evt MouseUpEvent mouseDown :: Evt MouseDownEvent data MouseUpEvent = MouseUpEvent BoxId (Maybe Button) Location data MouseDownEvent = MouseDownEvent BoxId Button [Modifier] Location -- keyboard input keyEvents :: Evt (Key, [Modifier]) onChar :: Char -&amp;gt; Evt [Modifier] onKey :: Key -&amp;gt; Evt [Modifier] readChars :: Evt Char Drawing Widgets See the modules</description></item></channel></rss>