<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dyna-glosses on Dyna FRP</title><link>https://anton-k.github.io/dyna-frp/dyna-gloss/</link><description>Recent content in Dyna-glosses on Dyna FRP</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://anton-k.github.io/dyna-frp/dyna-gloss/index.xml" rel="self" type="application/rss+xml"/><item><title>dyna-gloss tutorial</title><link>https://anton-k.github.io/dyna-frp/dyna-gloss/tutorial-toc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anton-k.github.io/dyna-frp/dyna-gloss/tutorial-toc/</guid><description>FRP bindings for library gloss which is great to create 2D animation and graphics. It features declarative and functional approach to drawing the pictures and we make it even more declarative with FRP style.
Gloss hides the pain of drawing simple vector graphics behind a nice data type and a few display functions. Gloss uses OpenGL under the hood, but you won&amp;rsquo;t need to worry about any of that. Get something cool on the screen in under 10 minutes.</description></item><item><title>FRP for gloss gaming/animation library</title><link>https://anton-k.github.io/dyna-frp/dyna-gloss/tutorial/00-intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anton-k.github.io/dyna-frp/dyna-gloss/tutorial/00-intro/</guid><description>In this tutorial we will study the FRP binding to the gloss library. The gloss is suitable to create animations and games. It features declarative description of drawings. The application is run with state-machine like approach. We have a function that renders the state of application on the screen and we have a function that updates the state on events.
With FRP we use the same functions for drawing as they are defined in the gloss (see the module Graphics.</description></item><item><title>FRP Gloss example</title><link>https://anton-k.github.io/dyna-frp/dyna-gloss/tutorial/01-example/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anton-k.github.io/dyna-frp/dyna-gloss/tutorial/01-example/</guid><description>Let&amp;rsquo;s study another example. In this application we are going to paint green and red circles on the screen. We paint in the mouse position when we press Right Button and we can change the color when we press the Left Button.
The complete code can be found in the directory: dyna-gloss/examples/Ball.hs.
Initialise application Let&amp;rsquo;s start with an empty screen and setup all the defaults:
module Main where import Dyna.Gloss -- | Screen specification spec :: Spec spec = defSpec { spec&amp;#39;display = InWindow &amp;#34;Main&amp;#34; (700, 700) (50, 50) } -- | Main app main = runApp spec $ pure pic pic = mempty This should draw an empty screen.</description></item><item><title>Quick Reference of dyna-gloss functions</title><link>https://anton-k.github.io/dyna-frp/dyna-gloss/tutorial/101-reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anton-k.github.io/dyna-frp/dyna-gloss/tutorial/101-reference/</guid><description>All FRP core functions can be used (see the reference for dyna package). Main types
Evt a - event streams Dyn a - dynamic values Run a - main app/frp monad Vec - vectors Point - same as vector Picture - drawing Click - click event Spec - initial config for the application Run the application runApp :: Spec -&amp;gt; Run (Dyn Picture) -&amp;gt; IO () -- init application data Spec = Spec { spec&amp;#39;display :: Display -- ^ display settings , spec&amp;#39;background :: Color -- ^ background color to clear each frame , spec&amp;#39;steps :: Int -- ^ number of steps for simulation } defSpec :: Spec -- | Describes how Gloss should display its output.</description></item></channel></rss>